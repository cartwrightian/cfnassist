

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

ext.currentGitSha = { ->
    def result = new ByteArrayOutputStream()
    exec {
        commandLine 'git'
        args 'rev-parse', 'HEAD'
        standardOutput = result
    }
    return result.toString().replaceAll("(?:\\n|\\r)", "")
}

def candidate = System.getenv("CIRCLE_BUILD_NUM") ?: "0"
def buildNumber = System.getenv("RELEASE_NUMBER") ?: candidate

def githubToken = System.getenv("GITHUB_TOKEN")
def gitUser = System.getenv("CIRCLE_PROJECT_USERNAME") ?: System.getenv("GIT_USERNAME")
def gitProject = System.getenv("CIRCLE_PROJECT_REPONAME") ?: System.getenv("GIT_PROJECT")
def gitSha = System.getenv("CIRCLE_SHA1") ?: currentGitSha()
def goPath = System.getenv("GOPATH") ?: "./go"

version = '1.3.'+buildNumber

repositories {
    mavenCentral()
}

project.ext {
    awsSdk = '2.20.160'
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.6',
            'ch.qos.logback:logback-classic:1.4.5'
            'ch.qos.logback:logback-core:1.4.5'

    implementation 'software.amazon.awssdk:protocol-core:'+awsSdk,
            'software.amazon.awssdk:aws-query-protocol:'+awsSdk,
            'software.amazon.awssdk:ec2:'+awsSdk,
            'software.amazon.awssdk:cloudformation:'+awsSdk,
            'software.amazon.awssdk:elasticloadbalancing:'+awsSdk,
            'software.amazon.awssdk:elasticloadbalancingv2:'+awsSdk,
            'software.amazon.awssdk:sns:'+awsSdk,
            'software.amazon.awssdk:sqs:'+awsSdk,
            'software.amazon.awssdk:iam:'+awsSdk,
            'software.amazon.awssdk:rds:'+awsSdk,
            'software.amazon.awssdk:s3:'+awsSdk,
            'software.amazon.awssdk:cloudwatchlogs:'+awsSdk

    implementation 'commons-io:commons-io:2.11.0',
            'commons-cli:commons-cli:1.5.0',
            'commons-net:commons-net:3.9.0',
            'org.apache.ant:ant:1.10.13',
            'com.fasterxml.jackson.core:jackson-core:2.14.2',
            'com.fasterxml.jackson.core:jackson-databind:2.14.2'

    testImplementation 'junit:junit:4.13.2',
            'org.easymock:easymock:5.2.0'
}

application {
    mainClass = 'tw.com.commandline.Main'
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
        resources.srcDir file('test/resources')
    }
}


task unit(type: Test, dependsOn: compileJava) {
    environment 'testEnvVar', 'testValue'
    filter {
        includeTestsMatching "tw.com.unit.*"
    }
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}



task integration(type: Test,  dependsOn: compileJava) {
    testLogging.showStandardStreams = true
    filter {
        includeTestsMatching "tw.com.integration.*"
    }
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

task acceptance(type: Test,  dependsOn: compileJava) {
    testLogging.showStandardStreams = true
    filter {
        includeTestsMatching "tw.com.acceptance.*"
    }
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

distributions {
    main {
        contents {
            from { 'README.md' }
            into('conf') {
                from 'conf'
            }
        }
    }
}

task release(type:Exec, dependsOn: distZip) {
    executable  goPath+'/bin/ghr'
    args '-t', githubToken, '-u', gitUser, '-r', gitProject, '-c', gitSha, '-delete', version, './build/distributions'
}

task copyDependencies(type: Copy) {
    from configurations.default
    into 'build/dependencies'
}


