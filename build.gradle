

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.ajoberstar:gradle-git:1.2.0'
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'idea'

def buildNumber = System.getenv("CIRCLE_BUILD_NUM") ?: "0"

version = '1.1.'+buildNumber

repositories {
    mavenCentral()
}

configurations {
	compileOnly
	testRuntime.extendsFrom(compileOnly)
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25',
            'ch.qos.logback:logback-classic:1.2.3',
            // aws sdk 2
            'software.amazon.awssdk:protocol-core:2.2.0',
            'software.amazon.awssdk:aws-query-protocol:2.2.0',
            'software.amazon.awssdk:ec2:2.2.0',
            'software.amazon.awssdk:cloudformation:2.17.142',
            'software.amazon.awssdk:elasticloadbalancing:2.2.0',
            'software.amazon.awssdk:sns:2.2.0',
            'software.amazon.awssdk:sqs:2.2.0',
            'software.amazon.awssdk:iam:2.2.0',
            'software.amazon.awssdk:rds:2.2.0',
            'software.amazon.awssdk:s3:2.2.0',
            'software.amazon.awssdk:cloudwatchlogs:2.2.0',
            
            'commons-io:commons-io:2.6',
            'commons-cli:commons-cli:1.4',
            'commons-net:commons-net:3.6',
            'org.apache.ant:ant:1.9.6'

    testCompile 'junit:junit:4.11',
            'org.easymock:easymock:3.2'
}

mainClassName = 'tw.com.commandline.Main'

sourceSets {
	main { java { srcDirs 'src' } }
	test { java { srcDirs 'test' } }
}

sourceSets.all {
    compileClasspath += configurations.compileOnly
}

test {
    environment 'testEnvVar', 'testValue'
    filter {
        includeTestsMatching "tw.com.unit.*"
    }
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

task unit(type: Test) {
    environment 'testEnvVar', 'testValue'
    filter {
        includeTestsMatching "tw.com.unit.*"
    }
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

task integration(type: Test) {
    filter {
        includeTestsMatching "tw.com.integration.*"
    }
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

task acceptance(type: Test) {
    filter {
        includeTestsMatching "tw.com.acceptance.*"
    }
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

jar {
    manifest {
        attributes(
                "Manifest-Version": "1."+buildNumber,
                "Class-Path": configurations.compileOnly.collect { it.getName() }.join(' '),
                "Main-Class": mainClassName
        )
    }
    baseName = project.name + '-all'
    from({ configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

distributions {
    main {
        baseName = project.name
        contents {
            from { 'README.md' }
            from { 'testAntTasks.xml"' }
            into('conf') {
                from 'conf'
            } into('licenses') {
                from 'lib'
                include '**/*LICENSE.txt'
                includeEmptyDirs = false
            }
        }
    }
}

task cfnassist {
    doLast {
        ant.taskdef(name: 'cfnassist', classname: 'tw.com.ant.CfnAssistAntTask') {
            classpath {
                fileset(dir: jar.destinationDir, includes: jar.archiveName)
            }
        }
    }
}

task upload(dependsOn: ['distZip','installDist','cfnassist']) {
    doLast {
        antBuild.cfnassist(buildNumber: buildNumber, bucketname: 'cfnassist-release') {
            Artifact(name: 'package', value: distZip.archivePath)
            S3Create()
        }
    }
}
upload.mustRunAfter installDist

task release(dependsOn: ['upload'])

idea {
  module {
        scopes.TEST.plus += [ configurations.compileOnly ]
        scopes.PROVIDED.plus += [ configurations.compileOnly ]
  }
}

